# Generated by Django 4.2.23 on 2025-07-15 17:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ICFESExam',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('exam_type', models.CharField(choices=[('SABER_11', 'Saber 11'), ('SABER_PRO', 'Saber Pro'), ('PRACTICE', 'Simulacro'), ('DIAGNOSTIC', 'Diagnóstico')], max_length=20)),
                ('period', models.CharField(choices=[('2024-1', '2024 Período 1'), ('2024-2', '2024 Período 2'), ('2023-1', '2023 Período 1'), ('2023-2', '2023 Período 2')], max_length=10)),
                ('duration_minutes', models.IntegerField(default=285)),
                ('total_questions', models.IntegerField(default=158)),
                ('mathematics_questions', models.IntegerField(default=42)),
                ('reading_questions', models.IntegerField(default=42)),
                ('natural_sciences_questions', models.IntegerField(default=28)),
                ('social_studies_questions', models.IntegerField(default=30)),
                ('english_questions', models.IntegerField(default=16)),
                ('max_score_per_area', models.IntegerField(default=100)),
                ('global_max_score', models.IntegerField(default=500)),
                ('is_active', models.BooleanField(default=True)),
                ('is_official', models.BooleanField(default=False)),
                ('registration_start', models.DateTimeField(blank=True, null=True)),
                ('registration_end', models.DateTimeField(blank=True, null=True)),
                ('exam_date', models.DateTimeField(blank=True, null=True)),
                ('results_release_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'icfes_exams',
                'ordering': ['-exam_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ICFESPrediction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('prediction_type', models.CharField(choices=[('CURRENT', 'Predicción Actual'), ('30_DAYS', 'Predicción a 30 días'), ('60_DAYS', 'Predicción a 60 días'), ('EXAM_DATE', 'Predicción para fecha de examen')], max_length=20)),
                ('predicted_mathematics', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('predicted_reading', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('predicted_natural_sciences', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('predicted_social_studies', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('predicted_english', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('predicted_global', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('confidence_level', models.CharField(choices=[('LOW', 'Baja'), ('MEDIUM', 'Media'), ('HIGH', 'Alta'), ('VERY_HIGH', 'Muy Alta')], max_length=10)),
                ('confidence_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('data_points_used', models.IntegerField(default=0)),
                ('study_hours_factor', models.FloatField(default=0.0)),
                ('improvement_trend', models.FloatField(default=0.0)),
                ('study_plan_recommendations', models.JSONField(default=dict)),
                ('weak_areas_focus', models.JSONField(default=list)),
                ('estimated_study_hours_needed', models.IntegerField(default=0)),
                ('target_university_score', models.IntegerField(blank=True, null=True)),
                ('probability_reaching_target', models.FloatField(default=0.0)),
                ('algorithm_version', models.CharField(default='1.0', max_length=10)),
                ('factors_analyzed', models.JSONField(default=dict)),
                ('prediction_date', models.DateTimeField(auto_now_add=True)),
                ('target_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'icfes_predictions',
            },
        ),
        migrations.CreateModel(
            name='ICFESResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('mathematics_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('reading_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('natural_sciences_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('social_studies_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('english_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('global_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('total_questions', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('incorrect_answers', models.IntegerField(default=0)),
                ('unanswered_questions', models.IntegerField(default=0)),
                ('total_time_seconds', models.IntegerField(default=0)),
                ('average_time_per_question', models.FloatField(default=0.0)),
                ('national_percentile', models.FloatField(default=0.0)),
                ('regional_percentile', models.FloatField(default=0.0)),
                ('school_percentile', models.FloatField(default=0.0)),
                ('easy_questions_correct', models.IntegerField(default=0)),
                ('medium_questions_correct', models.IntegerField(default=0)),
                ('hard_questions_correct', models.IntegerField(default=0)),
                ('is_official', models.BooleanField(default=False)),
                ('certificate_url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'icfes_results',
            },
        ),
        migrations.CreateModel(
            name='StudyPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('plan_type', models.CharField(choices=[('INTENSIVE', 'Intensivo'), ('REGULAR', 'Regular'), ('LIGHT', 'Ligero'), ('CUSTOM', 'Personalizado'), ('AI_GENERATED', 'Generado por IA')], max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Activo'), ('PAUSED', 'Pausado'), ('COMPLETED', 'Completado'), ('CANCELLED', 'Cancelado')], default='ACTIVE', max_length=20)),
                ('target_icfes_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('target_exam_date', models.DateField()),
                ('weekly_study_hours', models.IntegerField(default=10)),
                ('mathematics_percentage', models.FloatField(default=20.0)),
                ('reading_percentage', models.FloatField(default=20.0)),
                ('natural_sciences_percentage', models.FloatField(default=20.0)),
                ('social_studies_percentage', models.FloatField(default=20.0)),
                ('english_percentage', models.FloatField(default=20.0)),
                ('total_planned_hours', models.IntegerField(default=0)),
                ('completed_hours', models.IntegerField(default=0)),
                ('current_week', models.IntegerField(default=1)),
                ('total_weeks', models.IntegerField(default=12)),
                ('adaptive_difficulty', models.BooleanField(default=True)),
                ('min_difficulty', models.CharField(default='EASY', max_length=10)),
                ('max_difficulty', models.CharField(default='HARD', max_length=10)),
                ('ai_adjustments_enabled', models.BooleanField(default=True)),
                ('learning_style_adapted', models.BooleanField(default=True)),
                ('performance_based_adjustments', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'study_plans',
            },
        ),
        migrations.CreateModel(
            name='UniversityAdmission',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('university_name', models.CharField(max_length=200)),
                ('program_name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('min_global_score', models.IntegerField(default=0)),
                ('min_mathematics_score', models.IntegerField(default=0)),
                ('min_reading_score', models.IntegerField(default=0)),
                ('min_natural_sciences_score', models.IntegerField(default=0)),
                ('min_social_studies_score', models.IntegerField(default=0)),
                ('min_english_score', models.IntegerField(default=0)),
                ('average_admitted_score', models.IntegerField(default=0)),
                ('last_admitted_score', models.IntegerField(default=0)),
                ('competition_ratio', models.FloatField(default=1.0)),
                ('total_slots', models.IntegerField(default=0)),
                ('tuition_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('duration_semesters', models.IntegerField(default=10)),
                ('program_url', models.URLField(blank=True, max_length=500, null=True)),
                ('admission_requirements_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('admission_period', models.CharField(default='2024-2', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'university_admissions',
                'ordering': ['university_name', 'program_name'],
            },
        ),
        migrations.CreateModel(
            name='UserICFESSession',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('session_type', models.CharField(choices=[('FULL_EXAM', 'Examen Completo'), ('BY_AREA', 'Por Área'), ('ADAPTIVE', 'Adaptativo'), ('TIMED_PRACTICE', 'Práctica con Tiempo'), ('DIAGNOSTIC', 'Diagnóstico')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('IN_PROGRESS', 'En Progreso'), ('COMPLETED', 'Completado'), ('ABANDONED', 'Abandonado'), ('EXPIRED', 'Expirado')], default='PENDING', max_length=20)),
                ('areas_filter', models.JSONField(default=list)),
                ('difficulty_filter', models.CharField(blank=True, max_length=10, null=True)),
                ('custom_time_limit', models.IntegerField(blank=True, null=True)),
                ('current_question_index', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField(default=0)),
                ('answered_questions', models.IntegerField(default=0)),
                ('hints_enabled', models.BooleanField(default=True)),
                ('immediate_feedback', models.BooleanField(default=False)),
                ('explanation_after_answer', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True)),
                ('total_time_seconds', models.IntegerField(default=0)),
                ('time_per_area', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_icfes_sessions',
            },
        ),
        migrations.CreateModel(
            name='UserUniversityGoal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('ACTIVE', 'Activo'), ('ACHIEVED', 'Alcanzado'), ('MODIFIED', 'Modificado'), ('ABANDONED', 'Abandonado')], default='ACTIVE', max_length=20)),
                ('priority', models.IntegerField(default=1)),
                ('current_probability', models.FloatField(default=0.0)),
                ('required_score_improvement', models.IntegerField(default=0)),
                ('estimated_study_months', models.IntegerField(default=0)),
                ('initial_gap', models.IntegerField(default=0)),
                ('current_gap', models.IntegerField(default=0)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_admission_date', models.DateField()),
                ('achieved_at', models.DateTimeField(blank=True, null=True)),
                ('university_admission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icfes.universityadmission')),
            ],
            options={
                'db_table': 'user_university_goals',
                'ordering': ['priority', '-created_at'],
            },
        ),
    ]

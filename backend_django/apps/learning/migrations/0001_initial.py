# Generated by Django 4.2.16 on 2025-07-17 17:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("content", "0001_initial"),
        ("icfes", "0003_areaevaluacion_areatematica_competenciaicfes_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LearningPath",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=220, unique=True)),
                ("description", models.TextField()),
                ("short_description", models.CharField(max_length=300)),
                (
                    "path_type",
                    models.CharField(
                        choices=[
                            ("ICFES_PREP", "Preparación ICFES"),
                            ("SUBJECT_MASTERY", "Dominio de Materia"),
                            ("SKILL_DEVELOPMENT", "Desarrollo de Habilidades"),
                            ("CAREER_EXPLORATION", "Exploración Vocacional"),
                            ("CHALLENGE", "Desafío Especial"),
                            ("CUSTOM", "Personalizado"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Borrador"),
                            ("ACTIVE", "Activo"),
                            ("FEATURED", "Destacado"),
                            ("ARCHIVED", "Archivado"),
                            ("MAINTENANCE", "Mantenimiento"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("BEGINNER", "Principiante"),
                            ("INTERMEDIATE", "Intermedio"),
                            ("ADVANCED", "Avanzado"),
                            ("EXPERT", "Experto"),
                            ("ADAPTIVE", "Adaptativo"),
                        ],
                        max_length=20,
                    ),
                ),
                ("target_icfes_areas", models.JSONField(default=list)),
                ("estimated_duration_hours", models.IntegerField(default=40)),
                ("recommended_weekly_hours", models.IntegerField(default=5)),
                ("min_grade_level", models.IntegerField(default=9)),
                ("max_grade_level", models.IntegerField(default=11)),
                ("total_xp_available", models.IntegerField(default=0)),
                ("completion_xp_bonus", models.IntegerField(default=100)),
                ("mastery_xp_bonus", models.IntegerField(default=200)),
                (
                    "required_hero_class",
                    models.CharField(blank=True, max_length=2, null=True),
                ),
                ("required_level", models.IntegerField(default=1)),
                (
                    "thumbnail_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "cover_image_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "intro_video_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("primary_color", models.CharField(default="#3B82F6", max_length=7)),
                ("secondary_color", models.CharField(default="#EFF6FF", max_length=7)),
                ("icon_emoji", models.CharField(default="🎓", max_length=10)),
                ("has_adaptive_difficulty", models.BooleanField(default=True)),
                ("has_peer_comparison", models.BooleanField(default=True)),
                ("has_leaderboards", models.BooleanField(default=True)),
                ("has_streaks", models.BooleanField(default=True)),
                ("has_certificates", models.BooleanField(default=True)),
                ("is_premium", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_ai_enhanced", models.BooleanField(default=False)),
                ("total_enrollments", models.IntegerField(default=0)),
                ("total_completions", models.IntegerField(default=0)),
                ("average_completion_time_hours", models.FloatField(default=0.0)),
                ("average_rating", models.FloatField(default=0.0)),
                ("ai_recommendations_enabled", models.BooleanField(default=True)),
                ("adaptive_sequencing_enabled", models.BooleanField(default=True)),
                ("personalized_feedback_enabled", models.BooleanField(default=True)),
                ("learning_outcomes", models.JSONField(default=list)),
                ("tags", models.JSONField(default=list)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_paths",
                    models.ManyToManyField(
                        blank=True,
                        related_name="unlocks_paths",
                        to="learning.learningpath",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ruta de Aprendizaje",
                "verbose_name_plural": "Rutas de Aprendizaje",
                "db_table": "learning_paths",
                "ordering": ["-is_featured", "difficulty_level", "name"],
            },
        ),
        migrations.CreateModel(
            name="LearningPathLesson",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "lesson_type",
                    models.CharField(
                        choices=[
                            ("INTRO", "Introducción"),
                            ("CONCEPT", "Concepto"),
                            ("PRACTICE", "Práctica"),
                            ("QUIZ", "Quiz"),
                            ("STORY", "Historia"),
                            ("SPEAKING", "Expresión Oral"),
                            ("LISTENING", "Comprensión Auditiva"),
                            ("CHALLENGE", "Desafío"),
                        ],
                        max_length=20,
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("estimated_duration_minutes", models.IntegerField(default=15)),
                (
                    "difficulty_level",
                    models.CharField(default="INTERMEDIATE", max_length=20),
                ),
                ("max_attempts", models.IntegerField(default=3)),
                ("passing_score", models.FloatField(default=70.0)),
                ("xp_reward", models.IntegerField(default=10)),
                ("perfect_score_bonus", models.IntegerField(default=5)),
                ("hints_enabled", models.BooleanField(default=True)),
                ("explanations_enabled", models.BooleanField(default=True)),
                ("skip_enabled", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_assessment", models.BooleanField(default=False)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content_units",
                    models.ManyToManyField(
                        blank=True,
                        related_name="learning_path_lessons",
                        to="content.contentunit",
                    ),
                ),
                (
                    "icfes_questions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="learning_path_lessons",
                        to="icfes.preguntaicfes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lección de Ruta de Aprendizaje",
                "verbose_name_plural": "Lecciones de Rutas de Aprendizaje",
                "db_table": "learning_path_lessons",
                "ordering": ["path_unit", "order"],
            },
        ),
        migrations.CreateModel(
            name="PathAchievement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("COMPLETION", "Completitud"),
                            ("SPEED", "Velocidad"),
                            ("ACCURACY", "Precisión"),
                            ("STREAK", "Racha"),
                            ("PERFECT", "Perfección"),
                            ("MILESTONE", "Hito"),
                            ("SPECIAL", "Especial"),
                        ],
                        max_length=20,
                    ),
                ),
                ("icon_emoji", models.CharField(default="🏆", max_length=10)),
                ("badge_color", models.CharField(default="#FFD700", max_length=7)),
                ("rarity", models.CharField(default="COMMON", max_length=20)),
                ("criteria", models.JSONField(default=dict)),
                ("xp_reward", models.IntegerField(default=50)),
                ("special_rewards", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("is_secret", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "learning_path",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to="learning.learningpath",
                    ),
                ),
            ],
            options={
                "verbose_name": "Logro de Ruta",
                "verbose_name_plural": "Logros de Rutas",
                "db_table": "path_achievements",
            },
        ),
        migrations.CreateModel(
            name="UserPathEnrollment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Activo"),
                            ("PAUSED", "Pausado"),
                            ("COMPLETED", "Completado"),
                            ("DROPPED", "Abandonado"),
                            ("EXPIRED", "Expirado"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("current_unit_order", models.IntegerField(default=0)),
                ("current_lesson_order", models.IntegerField(default=0)),
                ("progress_percentage", models.FloatField(default=0.0)),
                ("total_xp_earned", models.IntegerField(default=0)),
                ("total_lessons_completed", models.IntegerField(default=0)),
                ("total_time_minutes", models.IntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("daily_goal_minutes", models.IntegerField(default=30)),
                ("reminder_time", models.TimeField(blank=True, null=True)),
                ("current_streak_days", models.IntegerField(default=0)),
                ("max_streak_days", models.IntegerField(default=0)),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("paused_at", models.DateTimeField(blank=True, null=True)),
                ("adaptive_difficulty_enabled", models.BooleanField(default=True)),
                ("current_difficulty_modifier", models.FloatField(default=1.0)),
                ("enrollment_metadata", models.JSONField(default=dict)),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="learning.learningpath",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="path_enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Inscripción a Ruta de Aprendizaje",
                "verbose_name_plural": "Inscripciones a Rutas de Aprendizaje",
                "db_table": "user_path_enrollments",
            },
        ),
        migrations.CreateModel(
            name="UserPathAchievement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("progress_when_earned", models.FloatField(default=0.0)),
                ("xp_earned", models.IntegerField(default=0)),
                ("achievement_data", models.JSONField(default=dict)),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.pathachievement",
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.userpathenrollment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="path_achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Logro de Usuario en Ruta",
                "verbose_name_plural": "Logros de Usuarios en Rutas",
                "db_table": "user_path_achievements",
            },
        ),
        migrations.CreateModel(
            name="UserLessonProgress",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "No Iniciado"),
                            ("IN_PROGRESS", "En Progreso"),
                            ("COMPLETED", "Completado"),
                            ("PERFECT", "Perfecto"),
                            ("NEEDS_REVIEW", "Necesita Revisión"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                ("attempts_count", models.IntegerField(default=0)),
                ("best_score", models.FloatField(default=0.0)),
                ("last_score", models.FloatField(default=0.0)),
                ("total_time_seconds", models.IntegerField(default=0)),
                ("xp_earned", models.IntegerField(default=0)),
                ("hearts_spent", models.IntegerField(default=0)),
                ("hints_used", models.IntegerField(default=0)),
                ("first_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("last_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("attempt_data", models.JSONField(default=list)),
                ("mistake_patterns", models.JSONField(default=dict)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.userpathenrollment",
                    ),
                ),
                (
                    "path_lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.learningpathlesson",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Progreso de Lección del Usuario",
                "verbose_name_plural": "Progreso de Lecciones de los Usuarios",
                "db_table": "user_lesson_progress",
            },
        ),
        migrations.CreateModel(
            name="LearningPathUnit",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "unit_type",
                    models.CharField(
                        choices=[
                            ("FOUNDATION", "Fundamentos"),
                            ("CORE", "Núcleo"),
                            ("PRACTICE", "Práctica"),
                            ("ASSESSMENT", "Evaluación"),
                            ("PROJECT", "Proyecto"),
                            ("REVIEW", "Repaso"),
                            ("BONUS", "Bonus"),
                        ],
                        max_length=20,
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("estimated_duration_minutes", models.IntegerField(default=60)),
                ("difficulty_modifier", models.FloatField(default=1.0)),
                ("xp_reward", models.IntegerField(default=50)),
                ("hearts_required", models.IntegerField(default=1)),
                ("unlock_criteria", models.JSONField(default=dict)),
                ("is_bonus", models.BooleanField(default=False)),
                ("is_optional", models.BooleanField(default=False)),
                ("icon_emoji", models.CharField(default="📖", max_length=10)),
                (
                    "thumbnail_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("learning_objectives", models.JSONField(default=list)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="units",
                        to="learning.learningpath",
                    ),
                ),
            ],
            options={
                "verbose_name": "Unidad de Ruta de Aprendizaje",
                "verbose_name_plural": "Unidades de Rutas de Aprendizaje",
                "db_table": "learning_path_units",
                "ordering": ["learning_path", "order"],
            },
        ),
        migrations.CreateModel(
            name="LearningPathReview",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "content_quality",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "difficulty_appropriateness",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "engagement_level",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "goal_achievement",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("review_text", models.TextField(blank=True, null=True)),
                ("would_recommend", models.BooleanField(default=True)),
                ("helpful_votes", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.userpathenrollment",
                    ),
                ),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="learning.learningpath",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Reseña de Ruta de Aprendizaje",
                "verbose_name_plural": "Reseñas de Rutas de Aprendizaje",
                "db_table": "learning_path_reviews",
            },
        ),
        migrations.AddField(
            model_name="learningpathlesson",
            name="path_unit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="learning.learningpathunit",
            ),
        ),
        migrations.AddIndex(
            model_name="userpathenrollment",
            index=models.Index(
                fields=["user", "status"], name="user_path_e_user_id_8ce038_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpathenrollment",
            index=models.Index(
                fields=["learning_path", "status"],
                name="user_path_e_learnin_267bfc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userpathenrollment",
            index=models.Index(
                fields=["status", "last_activity_date"],
                name="user_path_e_status_11f937_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userpathenrollment",
            unique_together={("user", "learning_path")},
        ),
        migrations.AddIndex(
            model_name="userpathachievement",
            index=models.Index(
                fields=["user", "earned_at"], name="user_path_a_user_id_8cb6bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpathachievement",
            index=models.Index(
                fields=["achievement", "earned_at"],
                name="user_path_a_achieve_575aaa_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userpathachievement",
            unique_together={("user", "achievement")},
        ),
        migrations.AddIndex(
            model_name="userlessonprogress",
            index=models.Index(
                fields=["user", "status"], name="user_lesson_user_id_64b223_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userlessonprogress",
            index=models.Index(
                fields=["enrollment", "status"], name="user_lesson_enrollm_99a7f3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userlessonprogress",
            index=models.Index(
                fields=["path_lesson", "completed_at"],
                name="user_lesson_path_le_cfc05f_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userlessonprogress",
            unique_together={("user", "path_lesson")},
        ),
        migrations.AddIndex(
            model_name="pathachievement",
            index=models.Index(
                fields=["achievement_type", "is_active"],
                name="path_achiev_achieve_cf8271_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pathachievement",
            index=models.Index(
                fields=["learning_path", "is_active"],
                name="path_achiev_learnin_c15d55_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="learningpathunit",
            index=models.Index(
                fields=["learning_path", "order"], name="learning_pa_learnin_4c9832_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningpathunit",
            index=models.Index(
                fields=["unit_type", "is_active"], name="learning_pa_unit_ty_6b6e6a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="learningpathunit",
            unique_together={("learning_path", "order")},
        ),
        migrations.AddIndex(
            model_name="learningpathreview",
            index=models.Index(
                fields=["learning_path", "rating"],
                name="learning_pa_learnin_514c04_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="learningpathreview",
            index=models.Index(
                fields=["user", "created_at"], name="learning_pa_user_id_5f4eee_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="learningpathreview",
            unique_together={("user", "learning_path")},
        ),
        migrations.AddIndex(
            model_name="learningpathlesson",
            index=models.Index(
                fields=["path_unit", "order"], name="learning_pa_path_un_e9618c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningpathlesson",
            index=models.Index(
                fields=["lesson_type", "is_active"],
                name="learning_pa_lesson__55df00_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="learningpathlesson",
            unique_together={("path_unit", "order")},
        ),
        migrations.AddIndex(
            model_name="learningpath",
            index=models.Index(
                fields=["path_type", "status"], name="learning_pa_path_ty_34b5cd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningpath",
            index=models.Index(
                fields=["difficulty_level", "is_featured"],
                name="learning_pa_difficu_fe41c4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="learningpath",
            index=models.Index(
                fields=["status", "published_at"], name="learning_pa_status_3e2cfa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningpath",
            index=models.Index(
                fields=["is_premium", "is_featured"],
                name="learning_pa_is_prem_a84033_idx",
            ),
        ),
    ]

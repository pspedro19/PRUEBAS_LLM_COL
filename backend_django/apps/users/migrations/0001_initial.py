# Generated by Django 4.2.23 on 2025-07-15 17:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('identification_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('grade', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(9), django.core.validators.MaxValueValidator(11)])),
                ('target_career', models.CharField(blank=True, max_length=200, null=True)),
                ('hero_class', models.CharField(choices=[('F', 'Novato F'), ('E', 'Bronce E'), ('D', 'Bronce D'), ('C', 'Plata C'), ('B', 'Plata B'), ('A', 'Oro A'), ('S', 'Platino S'), ('S+', 'Diamante S+')], default='F', max_length=2)),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('experience_points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('initial_assessment_completed', models.BooleanField(default=False)),
                ('initial_assessment_date', models.DateTimeField(blank=True, null=True)),
                ('vocational_test_completed', models.BooleanField(default=False)),
                ('assigned_role', models.CharField(blank=True, choices=[('TANK', 'Tanque'), ('DPS', 'Daño'), ('SUPPORT', 'Soporte'), ('SPECIALIST', 'Especialista')], max_length=10, null=True)),
                ('avatar_config', models.JSONField(blank=True, default=dict)),
                ('avatar_evolution_stage', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('notification_preferences', models.JSONField(blank=True, default=dict)),
                ('study_schedule', models.JSONField(blank=True, default=dict)),
                ('preferred_language', models.CharField(default='es', max_length=5)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('min_icfes_score', models.IntegerField(default=0)),
                ('logo_url', models.URLField(blank=True, max_length=500, null=True)),
                ('website', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'universities',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_questions_answered', models.IntegerField(default=0)),
                ('total_correct_answers', models.IntegerField(default=0)),
                ('total_study_minutes', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('max_streak', models.IntegerField(default=0)),
                ('current_vitality', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_vitality_update', models.DateTimeField(auto_now=True)),
                ('learning_style', models.CharField(blank=True, max_length=50, null=True)),
                ('difficulty_preference', models.CharField(default='adaptive', max_length=20)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('improvement_rate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('department', models.CharField(max_length=100)),
                ('school_type', models.CharField(choices=[('PUBLIC', 'Público'), ('PRIVATE', 'Privado'), ('CHARTER', 'Concesión')], max_length=10)),
                ('logo_url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'schools',
                'indexes': [models.Index(fields=['school_type'], name='schools_school__eef8c2_idx'), models.Index(fields=['city', 'department'], name='schools_city_9483e9_idx')],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.school'),
        ),
        migrations.AddField(
            model_name='user',
            name='target_university',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.university'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['hero_class'], name='users_hero_cl_1a7baf_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['school'], name='users_school__965c22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['level'], name='users_level_48a389_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'last_activity'], name='users_is_acti_fed89e_idx'),
        ),
    ]

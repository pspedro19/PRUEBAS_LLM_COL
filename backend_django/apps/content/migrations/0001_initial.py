# Generated by Django 4.2.16 on 2025-07-17 17:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentCategory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=220, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category_type",
                    models.CharField(
                        choices=[
                            ("ACADEMIC", "Acad칠mico"),
                            ("SKILL", "Habilidad"),
                            ("TOPIC", "Tem치tico"),
                            ("EXAM_PREP", "Preparaci칩n Examen"),
                            ("CAREER", "Orientaci칩n Vocacional"),
                        ],
                        max_length=20,
                    ),
                ),
                ("icon", models.CharField(default="游닄", max_length=100)),
                ("color_theme", models.CharField(default="#3B82F6", max_length=7)),
                (
                    "cover_image_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "min_grade_level",
                    models.IntegerField(
                        default=9,
                        validators=[
                            django.core.validators.MinValueValidator(6),
                            django.core.validators.MaxValueValidator(11),
                        ],
                    ),
                ),
                (
                    "max_grade_level",
                    models.IntegerField(
                        default=11,
                        validators=[
                            django.core.validators.MinValueValidator(6),
                            django.core.validators.MaxValueValidator(11),
                        ],
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="content.contentcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Categor칤a de Contenido",
                "verbose_name_plural": "Categor칤as de Contenido",
                "db_table": "content_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ContentUnit",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=220)),
                ("description", models.TextField()),
                (
                    "unit_type",
                    models.CharField(
                        choices=[
                            ("LESSON", "Lecci칩n"),
                            ("PRACTICE", "Pr치ctica"),
                            ("QUIZ", "Quiz"),
                            ("PROJECT", "Proyecto"),
                            ("ASSESSMENT", "Evaluaci칩n"),
                            ("STORY", "Historia Interactiva"),
                            ("GAME", "Juego Educativo"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("BEGINNER", "Principiante"),
                            ("BASIC", "B치sico"),
                            ("INTERMEDIATE", "Intermedio"),
                            ("ADVANCED", "Avanzado"),
                            ("EXPERT", "Experto"),
                        ],
                        max_length=20,
                    ),
                ),
                ("estimated_duration_minutes", models.IntegerField(default=15)),
                ("recommended_age_min", models.IntegerField(default=14)),
                ("recommended_age_max", models.IntegerField(default=18)),
                ("xp_reward", models.IntegerField(default=10)),
                ("hearts_required", models.IntegerField(default=1)),
                ("completion_criteria", models.JSONField(default=dict)),
                (
                    "thumbnail_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "video_intro_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "audio_intro_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("has_theory", models.BooleanField(default=True)),
                ("has_examples", models.BooleanField(default=True)),
                ("has_practice", models.BooleanField(default=True)),
                ("has_assessment", models.BooleanField(default=True)),
                ("order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_premium", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("total_attempts", models.IntegerField(default=0)),
                ("total_completions", models.IntegerField(default=0)),
                ("average_completion_time", models.FloatField(default=0.0)),
                ("average_rating", models.FloatField(default=0.0)),
                ("learning_objectives", models.JSONField(default=list)),
                ("tags", models.JSONField(default=list)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_units",
                        to="content.contentcategory",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_units",
                    models.ManyToManyField(
                        blank=True,
                        related_name="unlocks_units",
                        to="content.contentunit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Unidad de Contenido",
                "verbose_name_plural": "Unidades de Contenido",
                "db_table": "content_units",
                "ordering": ["category", "order", "title"],
            },
        ),
        migrations.CreateModel(
            name="ContentRating",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("review_text", models.TextField(blank=True, null=True)),
                (
                    "content_quality",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "difficulty_appropriateness",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "engagement_level",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_helpful", models.BooleanField(default=True)),
                ("would_recommend", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="content.contentunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Calificaci칩n de Contenido",
                "verbose_name_plural": "Calificaciones de Contenido",
                "db_table": "content_ratings",
            },
        ),
        migrations.CreateModel(
            name="ContentLesson",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "lesson_type",
                    models.CharField(
                        choices=[
                            ("THEORY", "Teor칤a"),
                            ("EXAMPLE", "Ejemplo"),
                            ("PRACTICE", "Pr치ctica"),
                            ("QUIZ", "Quiz"),
                            ("INTERACTIVE", "Interactivo"),
                            ("VIDEO", "Video"),
                            ("READING", "Lectura"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content_format",
                    models.CharField(
                        choices=[
                            ("TEXT", "Texto"),
                            ("VIDEO", "Video"),
                            ("AUDIO", "Audio"),
                            ("INTERACTIVE", "Interactivo"),
                            ("MIXED", "Mixto"),
                        ],
                        max_length=20,
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("content_text", models.TextField(blank=True, null=True)),
                ("content_html", models.TextField(blank=True, null=True)),
                ("video_url", models.URLField(blank=True, max_length=500, null=True)),
                ("audio_url", models.URLField(blank=True, max_length=500, null=True)),
                ("image_url", models.URLField(blank=True, max_length=500, null=True)),
                (
                    "interactive_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("estimated_duration_seconds", models.IntegerField(default=300)),
                ("is_mandatory", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("xp_reward", models.IntegerField(default=5)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="content.contentunit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lecci칩n de Contenido",
                "verbose_name_plural": "Lecciones de Contenido",
                "db_table": "content_lessons",
                "ordering": ["content_unit", "order"],
            },
        ),
        migrations.CreateModel(
            name="ContentBookmark",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("notes", models.TextField(blank=True, null=True)),
                ("tags", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmarks",
                        to="content.contentunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_bookmarks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Marcador de Contenido",
                "verbose_name_plural": "Marcadores de Contenido",
                "db_table": "content_bookmarks",
            },
        ),
        migrations.CreateModel(
            name="UserContentProgress",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "No Iniciado"),
                            ("IN_PROGRESS", "En Progreso"),
                            ("COMPLETED", "Completado"),
                            ("MASTERED", "Dominado"),
                            ("NEEDS_REVIEW", "Necesita Revisi칩n"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                ("progress_percentage", models.FloatField(default=0.0)),
                ("is_completed", models.BooleanField(default=False)),
                ("is_mastered", models.BooleanField(default=False)),
                ("attempts_count", models.IntegerField(default=0)),
                ("best_score", models.FloatField(default=0.0)),
                ("total_time_seconds", models.IntegerField(default=0)),
                ("completion_time_seconds", models.IntegerField(default=0)),
                ("first_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("last_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("mastered_at", models.DateTimeField(blank=True, null=True)),
                ("xp_earned", models.IntegerField(default=0)),
                ("hearts_spent", models.IntegerField(default=0)),
                ("lesson_progress", models.JSONField(default=dict)),
                ("mistakes_data", models.JSONField(default=list)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Progreso de Contenido del Usuario",
                "verbose_name_plural": "Progreso de Contenido de los Usuarios",
                "db_table": "user_content_progress",
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="user_conten_user_id_afea24_idx"
                    ),
                    models.Index(
                        fields=["content_unit", "is_completed"],
                        name="user_conten_content_b5922f_idx",
                    ),
                    models.Index(
                        fields=["user", "updated_at"],
                        name="user_conten_user_id_d230ad_idx",
                    ),
                ],
                "unique_together": {("user", "content_unit")},
            },
        ),
        migrations.AddIndex(
            model_name="contentunit",
            index=models.Index(
                fields=["category", "order"], name="content_uni_categor_046303_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentunit",
            index=models.Index(
                fields=["difficulty_level", "is_active"],
                name="content_uni_difficu_0b6608_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentunit",
            index=models.Index(
                fields=["unit_type", "is_active"], name="content_uni_unit_ty_ff6005_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentunit",
            index=models.Index(
                fields=["is_featured", "is_active"],
                name="content_uni_is_feat_0915f3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contentunit",
            unique_together={("category", "slug")},
        ),
        migrations.AddIndex(
            model_name="contentrating",
            index=models.Index(
                fields=["content_unit", "rating"], name="content_rat_content_611d40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentrating",
            index=models.Index(
                fields=["user", "created_at"], name="content_rat_user_id_2c9520_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contentrating",
            unique_together={("user", "content_unit")},
        ),
        migrations.AddIndex(
            model_name="contentlesson",
            index=models.Index(
                fields=["content_unit", "order"], name="content_les_content_fb9e14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentlesson",
            index=models.Index(
                fields=["lesson_type", "is_active"],
                name="content_les_lesson__41fef2_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contentlesson",
            unique_together={("content_unit", "order")},
        ),
        migrations.AddIndex(
            model_name="contentcategory",
            index=models.Index(
                fields=["category_type", "is_active"],
                name="content_cat_categor_f5f0b3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentcategory",
            index=models.Index(
                fields=["parent_category", "order"],
                name="content_cat_parent__94c0ac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentcategory",
            index=models.Index(
                fields=["is_featured", "is_active"],
                name="content_cat_is_feat_8cf939_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentbookmark",
            index=models.Index(
                fields=["user", "created_at"], name="content_boo_user_id_2dc2a2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contentbookmark",
            unique_together={("user", "content_unit")},
        ),
    ]

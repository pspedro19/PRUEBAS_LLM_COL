# Generated by Django 4.2.23 on 2025-07-15 17:37

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Academy',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('specialty', models.CharField(choices=[('MATHEMATICS', 'Academia de Matemáticas'), ('READING', 'Academia de Lectura Crítica'), ('NATURAL_SCIENCES', 'Academia de Ciencias Naturales'), ('SOCIAL_STUDIES', 'Academia de Ciencias Sociales'), ('ENGLISH', 'Academia de Inglés'), ('GENERAL', 'Academia General'), ('ELITE', 'Academia Élite')], max_length=20)),
                ('max_members', models.IntegerField(default=50)),
                ('entry_fee_coins', models.IntegerField(default=0)),
                ('min_level_required', models.IntegerField(default=1)),
                ('total_members', models.IntegerField(default=0)),
                ('total_xp_earned', models.BigIntegerField(default=0)),
                ('weekly_xp_earned', models.BigIntegerField(default=0)),
                ('academy_level', models.IntegerField(default=1)),
                ('logo_url', models.URLField(blank=True, max_length=500, null=True)),
                ('banner_url', models.URLField(blank=True, max_length=500, null=True)),
                ('theme_color', models.CharField(default='#3B82F6', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_recruiting', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'academies',
                'ordering': ['district', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AcademyMembership',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('MEMBER', 'Miembro'), ('ELDER', 'Veterano'), ('CO_LEADER', 'Co-Líder'), ('LEADER', 'Líder')], default='MEMBER', max_length=10)),
                ('contribution_xp', models.BigIntegerField(default=0)),
                ('weekly_contribution_xp', models.BigIntegerField(default=0)),
                ('donation_coins', models.BigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'academy_memberships',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('LEARNING', 'Aprendizaje'), ('SOCIAL', 'Social'), ('COMPETITIVE', 'Competitivo'), ('EXPLORATION', 'Exploración'), ('SPECIAL', 'Especial'), ('SEASONAL', 'Temporada')], max_length=20)),
                ('rarity', models.CharField(choices=[('COMMON', 'Común'), ('UNCOMMON', 'No Común'), ('RARE', 'Raro'), ('EPIC', 'Épico'), ('LEGENDARY', 'Legendario')], max_length=20)),
                ('requirements', models.JSONField(default=dict)),
                ('is_secret', models.BooleanField(default=False)),
                ('is_repeatable', models.BooleanField(default=False)),
                ('reward_xp', models.IntegerField(default=0)),
                ('reward_coins', models.IntegerField(default=0)),
                ('reward_title', models.CharField(blank=True, max_length=100, null=True)),
                ('reward_items', models.JSONField(default=list)),
                ('icon_url', models.URLField(blank=True, max_length=500, null=True)),
                ('badge_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('release_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('battle_type', models.CharField(choices=[('FRIENDLY', 'Amistosa'), ('RANKED', 'Clasificatoria'), ('TOURNAMENT', 'Torneo'), ('ACADEMY_WAR', 'Guerra de Academias')], max_length=20)),
                ('status', models.CharField(choices=[('WAITING', 'Esperando'), ('IN_PROGRESS', 'En Progreso'), ('COMPLETED', 'Completada'), ('CANCELLED', 'Cancelada')], default='WAITING', max_length=20)),
                ('question_count', models.IntegerField(default=5)),
                ('time_limit_minutes', models.IntegerField(default=10)),
                ('subject_filter', models.CharField(blank=True, max_length=20, null=True)),
                ('difficulty_filter', models.CharField(blank=True, max_length=10, null=True)),
                ('challenger_score', models.IntegerField(default=0)),
                ('opponent_score', models.IntegerField(default=0)),
                ('challenger_trophies_change', models.IntegerField(default=0)),
                ('opponent_trophies_change', models.IntegerField(default=0)),
                ('winner_xp_reward', models.IntegerField(default=50)),
                ('winner_coins_reward', models.IntegerField(default=25)),
                ('loser_xp_reward', models.IntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'battles',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('district_type', models.CharField(choices=[('STARTER', 'Distrito Inicial'), ('ACADEMIC', 'Distrito Académico'), ('ADVANCED', 'Distrito Avanzado'), ('ELITE', 'Distrito Élite'), ('LEGENDARY', 'Distrito Legendario')], max_length=20)),
                ('min_level_required', models.IntegerField(default=1)),
                ('min_hero_class', models.CharField(default='F', max_length=2)),
                ('min_icfes_score', models.IntegerField(default=0)),
                ('background_image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('theme_color', models.CharField(default='#3B82F6', max_length=7)),
                ('icon_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('unlock_order', models.IntegerField(default=0)),
                ('xp_multiplier', models.FloatField(default=1.0)),
                ('vitality_bonus', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'districts',
                'ordering': ['unlock_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('league_type', models.CharField(choices=[('BRONZE', 'Liga de Bronce'), ('SILVER', 'Liga de Plata'), ('GOLD', 'Liga de Oro'), ('PLATINUM', 'Liga de Platino'), ('DIAMOND', 'Liga de Diamante'), ('MASTER', 'Liga de Maestros'), ('GRANDMASTER', 'Liga de Gran Maestros')], max_length=20)),
                ('description', models.TextField()),
                ('min_trophies', models.IntegerField(default=0)),
                ('max_trophies', models.IntegerField(default=1000)),
                ('season_duration_days', models.IntegerField(default=30)),
                ('weekly_reward_coins', models.IntegerField(default=100)),
                ('weekly_reward_xp', models.IntegerField(default=500)),
                ('season_end_bonus', models.JSONField(default=dict)),
                ('icon_url', models.URLField(blank=True, max_length=500, null=True)),
                ('badge_url', models.URLField(blank=True, max_length=500, null=True)),
                ('theme_color', models.CharField(default='#3B82F6', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'leagues',
                'ordering': ['min_trophies'],
            },
        ),
        migrations.CreateModel(
            name='PowerUp',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('powerup_type', models.CharField(choices=[('XP_BOOST', 'Aumento XP'), ('TIME_FREEZE', 'Congelar Tiempo'), ('HINT', 'Pista'), ('SHIELD', 'Escudo'), ('VITALITY_RESTORE', 'Restaurar Vitalidad'), ('DOUBLE_COINS', 'Monedas Dobles')], max_length=20)),
                ('effect_config', models.JSONField(default=dict)),
                ('duration_minutes', models.IntegerField(default=0)),
                ('cooldown_minutes', models.IntegerField(default=0)),
                ('cost_coins', models.IntegerField(default=0)),
                ('cost_gems', models.IntegerField(default=0)),
                ('is_purchasable', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('min_level_required', models.IntegerField(default=1)),
                ('icon_url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'powerups',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('progress', models.JSONField(default=dict)),
                ('completion_percentage', models.FloatField(default=0.0)),
                ('is_completed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_achievements',
            },
        ),
        migrations.CreateModel(
            name='UserCurrency',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('currency_type', models.CharField(choices=[('COINS', 'Monedas'), ('GEMS', 'Gemas'), ('TOKENS', 'Tokens Especiales'), ('ENERGY', 'Energía')], max_length=10)),
                ('amount', models.BigIntegerField(default=0)),
                ('max_amount', models.BigIntegerField(default=999999)),
                ('daily_earned', models.IntegerField(default=0)),
                ('daily_limit', models.IntegerField(default=1000)),
                ('last_daily_reset', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_currencies',
            },
        ),
        migrations.CreateModel(
            name='UserLeagueStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('current_trophies', models.IntegerField(default=0)),
                ('season_trophies', models.IntegerField(default=0)),
                ('highest_trophies', models.IntegerField(default=0)),
                ('season_wins', models.IntegerField(default=0)),
                ('season_losses', models.IntegerField(default=0)),
                ('season_battles_count', models.IntegerField(default=0)),
                ('last_battle_at', models.DateTimeField(blank=True, null=True)),
                ('season_start_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_league_status',
            },
        ),
        migrations.CreateModel(
            name='UserPowerUp',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=False)),
                ('activated_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('acquired_at', models.DateTimeField(auto_now_add=True)),
                ('powerup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.powerup')),
            ],
            options={
                'db_table': 'user_powerups',
            },
        ),
    ]

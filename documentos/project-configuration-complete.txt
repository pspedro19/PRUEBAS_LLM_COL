# =====================================================
# CONFIGURACIÓN COMPLETA DEL PROYECTO
# CIUDADELA DEL CONOCIMIENTO ICFES
# =====================================================

# =====================================================
# ESTRUCTURA DE CARPETAS DEL PROYECTO
# =====================================================
"""
ciudadela-conocimiento/
├── backend/
│   ├── apps/
│   │   ├── __init__.py
│   │   ├── users/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   ├── urls.py
│   │   │   ├── admin.py
│   │   │   └── migrations/
│   │   ├── questions/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   ├── urls.py
│   │   │   ├── services.py
│   │   │   └── migrations/
│   │   ├── icfes/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   └── migrations/
│   │   ├── gamification/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   ├── services.py
│   │   │   ├── tasks.py
│   │   │   └── migrations/
│   │   ├── academies/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   └── migrations/
│   │   ├── jarvis/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   ├── services.py
│   │   │   └── migrations/
│   │   ├── assessments/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── serializers.py
│   │   │   └── migrations/
│   │   ├── analytics/
│   │   │   ├── __init__.py
│   │   │   ├── views.py
│   │   │   ├── services.py
│   │   │   └── migrations/
│   │   ├── notifications/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── views.py
│   │   │   ├── tasks.py
│   │   │   └── migrations/
│   │   └── schools/
│   │       ├── __init__.py
│   │       ├── models.py
│   │       ├── views.py
│   │       └── migrations/
│   ├── config/
│   │   ├── __init__.py
│   │   ├── settings.py
│   │   ├── urls.py
│   │   ├── wsgi.py
│   │   └── asgi.py
│   ├── static/
│   ├── media/
│   ├── logs/
│   ├── manage.py
│   ├── requirements.txt
│   ├── Dockerfile
│   ├── .env.example
│   └── .gitignore
│
├── frontend/
│   ├── src/
│   │   ├── app/
│   │   │   ├── api/
│   │   │   ├── auth/
│   │   │   ├── dashboard/
│   │   │   ├── practice/
│   │   │   ├── academy/
│   │   │   ├── challenge/
│   │   │   ├── leagues/
│   │   │   ├── profile/
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   │   └── globals.css
│   │   ├── components/
│   │   │   ├── ui/
│   │   │   ├── questions/
│   │   │   ├── jarvis/
│   │   │   ├── gamification/
│   │   │   └── shared/
│   │   ├── contexts/
│   │   ├── hooks/
│   │   ├── lib/
│   │   ├── services/
│   │   ├── styles/
│   │   └── types/
│   ├── public/
│   ├── package.json
│   ├── tsconfig.json
│   ├── next.config.js
│   ├── tailwind.config.js
│   ├── Dockerfile
│   └── .env.local.example
│
├── database/
│   └── init_new.sql
│
├── docker-compose.yml
├── .env
├── README.md
└── .gitignore
"""

# =====================================================
# docker-compose.yml COMPLETO
# =====================================================
version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    container_name: mathquest-db
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mathquest_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init_new.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mathquest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis para cache y Celery
  redis:
    container_name: mathquest-redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mathquest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend Django
  backend:
    container_name: mathquest-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@mathquest-db:5432/mathquest_db
      - REDIS_URL=redis://mathquest-redis:6379/0
      - DOCKER_CONTAINER=1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - mathquest-network
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        while ! nc -z mathquest-db 5432; do sleep 1; done &&
        echo 'Base de datos lista' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        echo 'Iniciando servidor...' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --reload
      "

  # Celery Worker
  celery:
    container_name: mathquest-celery
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@mathquest-db:5432/mathquest_db
      - REDIS_URL=redis://mathquest-redis:6379/0
      - DOCKER_CONTAINER=1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
    networks:
      - mathquest-network
    command: celery -A config worker -l info --concurrency=2

  # Celery Beat
  celery-beat:
    container_name: mathquest-celery-beat
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@mathquest-db:5432/mathquest_db
      - REDIS_URL=redis://mathquest-redis:6379/0
      - DOCKER_CONTAINER=1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
    networks:
      - mathquest-network
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Frontend Next.js
  frontend:
    container_name: mathquest-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    depends_on:
      - backend
    networks:
      - mathquest-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # pgAdmin
  pgadmin:
    container_name: mathquest-pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - mathquest-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  pgadmin_data:

networks:
  mathquest-network:
    driver: bridge

# =====================================================
# .env - Variables de entorno
# =====================================================
"""
# Django
SECRET_KEY=django-insecure-very-secret-key-change-this-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mathquest_db

# Redis
REDIS_URL=redis://localhost:6379/0

# OpenAI
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4-turbo-preview
OPENAI_MAX_TOKENS=2000

# Email (opcional)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# AWS S3 (opcional para archivos estáticos)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_STORAGE_BUCKET_NAME=
AWS_S3_REGION_NAME=us-east-1

# Sentry (opcional para monitoreo)
SENTRY_DSN=
"""

# =====================================================
# backend/.env.example
# =====================================================
"""
# Django
SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mathquest_db

# Redis
REDIS_URL=redis://localhost:6379/0

# OpenAI
OPENAI_API_KEY=your-openai-api-key
OPENAI_MODEL=gpt-4-turbo-preview

# Docker
DOCKER_CONTAINER=0
"""

# =====================================================
# frontend/.env.local.example
# =====================================================
"""
# API URLs
NEXT_PUBLIC_API_URL=http://localhost:8000/api
NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws

# Features flags
NEXT_PUBLIC_ENABLE_JARVIS=true
NEXT_PUBLIC_ENABLE_LEAGUES=true
NEXT_PUBLIC_ENABLE_LIVE_EVENTS=true

# Analytics (opcional)
NEXT_PUBLIC_GA_ID=
NEXT_PUBLIC_MIXPANEL_TOKEN=
"""

# =====================================================
# Makefile - Comandos útiles
# =====================================================
"""
.PHONY: help build up down logs shell migrate test clean

help:
	@echo "Comandos disponibles:"
	@echo "  make build    - Construir contenedores"
	@echo "  make up       - Iniciar servicios"
	@echo "  make down     - Detener servicios"
	@echo "  make logs     - Ver logs"
	@echo "  make shell    - Abrir shell en backend"
	@echo "  make migrate  - Ejecutar migraciones"
	@echo "  make test     - Ejecutar tests"
	@echo "  make clean    - Limpiar volúmenes"

build:
	docker-compose build

up:
	docker-compose up -d

down:
	docker-compose down

logs:
	docker-compose logs -f

shell:
	docker-compose exec backend bash

shell-db:
	docker-compose exec db psql -U postgres -d mathquest_db

migrate:
	docker-compose exec backend python manage.py migrate

makemigrations:
	docker-compose exec backend python manage.py makemigrations

createsuperuser:
	docker-compose exec backend python manage.py createsuperuser

collectstatic:
	docker-compose exec backend python manage.py collectstatic --noinput

test:
	docker-compose exec backend python manage.py test

clean:
	docker-compose down -v
	rm -rf backend/staticfiles/*
	rm -rf backend/media/*

reset-db:
	docker-compose down -v
	docker-compose up -d db
	sleep 5
	docker-compose up -d

load-sample-data:
	docker-compose exec backend python manage.py loaddata initial_data.json
"""

# =====================================================
# README.md
# =====================================================
"""
# 🏰 Ciudadela del Conocimiento ICFES

Sistema de preparación ICFES gamificado con IA

## 🚀 Inicio Rápido

### Requisitos previos
- Docker y Docker Compose
- Git
- Clave API de OpenAI

### Instalación

1. **Clonar el repositorio**
```bash
git clone https://github.com/tu-usuario/ciudadela-conocimiento.git
cd ciudadela-conocimiento
```

2. **Configurar variables de entorno**
```bash
cp .env.example .env
# Editar .env y agregar tu OPENAI_API_KEY
```

3. **Construir y levantar los servicios**
```bash
docker-compose up --build
```

4. **Crear superusuario (en otra terminal)**
```bash
docker-compose exec backend python manage.py createsuperuser
```

5. **Acceder a la aplicación**
- Frontend: http://localhost:3000
- Backend API: http://localhost:8000/api
- Admin Django: http://localhost:8000/admin
- pgAdmin: http://localhost:5050 (admin@admin.com / admin)

## 🏗️ Arquitectura

### Backend (Django)
- PostgreSQL 15
- Redis para cache y Celery
- Django REST Framework
- Celery para tareas asíncronas
- OpenAI GPT-4 para explicaciones

### Frontend (Next.js)
- React 18
- TypeScript
- Tailwind CSS
- Framer Motion
- React Query

## 📁 Estructura del Proyecto

```
ciudadela-conocimiento/
├── backend/           # API Django
├── frontend/          # Next.js
├── database/          # Scripts SQL
└── docker-compose.yml # Orquestación
```

## 🔑 Características principales

- **Gamificación completa**: Niveles, XP, ligas, logros
- **IA integrada**: Explicaciones personalizadas con GPT-4
- **Sistema de energía**: Gestión de vitalidad
- **Academias 3 fases**: Teoría, práctica, desafío
- **Eventos en vivo**: Competencias en tiempo real
- **Predicción ICFES**: ML para predecir puntajes

## 🛠️ Comandos útiles

```bash
# Ver logs
docker-compose logs -f backend

# Ejecutar migraciones
docker-compose exec backend python manage.py migrate

# Crear apps Django
docker-compose exec backend python manage.py startapp app_name

# Instalar dependencias Python
docker-compose exec backend pip install package_name
docker-compose exec backend pip freeze > requirements.txt

# Ejecutar tests
docker-compose exec backend python manage.py test
```

## 🔧 Desarrollo

### Backend
```bash
# Entrar al shell de Django
docker-compose exec backend python manage.py shell

# Ver queries SQL
docker-compose exec backend python manage.py debugsqlshell
```

### Frontend
```bash
# Instalar dependencias
docker-compose exec frontend npm install

# Ejecutar en modo desarrollo
docker-compose exec frontend npm run dev
```

## 📊 Base de datos

### Acceder a PostgreSQL
```bash
docker-compose exec db psql -U postgres -d mathquest_db
```

### Backup de base de datos
```bash
docker-compose exec db pg_dump -U postgres mathquest_db > backup.sql
```

### Restaurar base de datos
```bash
docker-compose exec -T db psql -U postgres mathquest_db < backup.sql
```

## 🐛 Solución de problemas

### Limpiar todo y empezar de nuevo
```bash
docker-compose down -v
docker system prune -a
docker-compose up --build
```

### Ver espacio en disco
```bash
docker system df
```

## 📝 Licencia

MIT License

## 👥 Contribuir

1. Fork el proyecto
2. Crear rama de feature (`git checkout -b feature/AmazingFeature`)
3. Commit cambios (`git commit -m 'Add AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abrir Pull Request
"""

# =====================================================
# scripts/init_project.sh - Script de inicialización
# =====================================================
"""
#!/bin/bash

echo "🚀 Inicializando Ciudadela del Conocimiento..."

# Crear estructura de carpetas
echo "📁 Creando estructura de carpetas..."
mkdir -p backend/{apps/{users,questions,icfes,gamification,academies,jarvis,assessments,analytics,notifications,schools}/{migrations,templates},config,static,media,logs}
mkdir -p frontend/{src/{app/{api,auth,dashboard,practice,academy,challenge,leagues,profile},components/{ui,questions,jarvis,gamification,shared},contexts,hooks,lib,services,styles,types},public}
mkdir -p database

# Crear archivos __init__.py
echo "📄 Creando archivos __init__.py..."
find backend/apps -type d -name "migrations" -prune -o -type d -exec touch {}/__init__.py \;

# Copiar archivos de configuración
echo "📋 Creando archivos de configuración..."
touch backend/{manage.py,requirements.txt,Dockerfile,.env.example,.gitignore}
touch frontend/{package.json,tsconfig.json,next.config.js,tailwind.config.js,Dockerfile,.env.local.example}
touch {docker-compose.yml,.env,README.md,.gitignore,Makefile}

# Crear .gitignore principal
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
.env
*.sqlite3
*.log
media/
staticfiles/

# Node
node_modules/
.next/
out/
build/
dist/
.env.local
.env.*.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# Docker
*.pid
EOF

echo "✅ Estructura del proyecto creada exitosamente!"
echo ""
echo "Próximos pasos:"
echo "1. Copiar el código de los artifacts a los archivos correspondientes"
echo "2. Configurar el archivo .env con tu OPENAI_API_KEY"
echo "3. Ejecutar: docker-compose up --build"
echo ""
echo "¡Listo para comenzar! 🎉"
"""

# =====================================================
# COMANDOS DE INICIALIZACIÓN
# =====================================================
"""
# 1. Hacer ejecutable el script
chmod +x scripts/init_project.sh

# 2. Ejecutar el script
./scripts/init_project.sh

# 3. Copiar el contenido de los artifacts a los archivos correspondientes:
   - PostgreSQL Database → database/init_new.sql
   - Django Backend → backend/ (settings.py, models.py, views.py, etc.)
   - Frontend React → frontend/src/

# 4. Configurar .env con tu OPENAI_API_KEY

# 5. Construir y ejecutar
docker-compose up --build

# 6. En otra terminal, crear superusuario
docker-compose exec backend python manage.py createsuperuser

# 7. Cargar datos iniciales (opcional)
docker-compose exec backend python manage.py loaddata initial_data.json
"""

# =====================================================
# ENDPOINTS PRINCIPALES DE LA API
# =====================================================
"""
# Autenticación
POST   /api/auth/register/
POST   /api/auth/login/
POST   /api/auth/logout/
POST   /api/auth/token/refresh/
GET    /api/auth/profile/

# Dashboard
GET    /api/dashboard/{user_id}/
GET    /api/dashboard/{user_id}/stats/

# Preguntas con IA
GET    /api/questions/
GET    /api/questions/{id}/
POST   /api/questions/{id}/explain-from-zero/  # 🔥 EXPLICACIÓN CON GPT-4
POST   /api/questions/{id}/attempt/
GET    /api/questions/{id}/hint/{level}/

# JARVIS IA
POST   /api/jarvis/response/
POST   /api/jarvis/deep-dive/{question_id}/
GET    /api/jarvis/challenge/{user_id}/
POST   /api/jarvis/study-plan/{user_id}/

# Gamificación
GET    /api/gamification/vitality/{user_id}/
POST   /api/gamification/vitality/{user_id}/use/
GET    /api/gamification/streaks/{user_id}/
GET    /api/gamification/leagues/
POST   /api/gamification/leagues/join/
GET    /api/gamification/achievements/{user_id}/
GET    /api/gamification/live-events/

# Academias
GET    /api/academies/
GET    /api/academies/{id}/
GET    /api/academies/{id}/phase/{phase}/
POST   /api/academies/{id}/phase/{phase}/complete/
POST   /api/academies/{id}/complete/

# ICFES
GET    /api/icfes/score/{user_id}/
GET    /api/icfes/prediction/{user_id}/
GET    /api/icfes/districts/{user_id}/
POST   /api/icfes/simulation/{user_id}/start/

# WebSocket
ws://localhost:8000/ws/user/{user_id}/  # Eventos en tiempo real
"""
#!/usr/bin/env python3
"""
Script de prueba para el sistema de quiz de la Torre de Babel
Verifica que todos los endpoints est√©n funcionando correctamente
"""

import requests
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

# Credenciales de prueba
TEST_USER = {
    "email": "test@example.com",
    "password": "test123"
}

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_step(step):
    print(f"\n>>> {step}")

def test_authentication():
    print_section("AUTENTICACI√ìN")
    
    # Intentar crear usuario primero (ignorar si ya existe)
    print_step("Verificando/creando usuario de prueba...")
    register_response = requests.post(f"{BASE_URL}/auth/register", json={
        "email": TEST_USER["email"],
        "password": TEST_USER["password"],
        "full_name": "Usuario Test"
    })
    
    if register_response.status_code == 200:
        print("‚úÖ Usuario de prueba creado exitosamente")
    else:
        print("‚ÑπÔ∏è Usuario de prueba ya existe o error en creaci√≥n (continuando...)")
    
    # Login
    print_step("Iniciando sesi√≥n...")
    login_response = requests.post(f"{BASE_URL}/auth/login", json={
        "email": TEST_USER["email"],
        "password": TEST_USER["password"]
    })
    
    if login_response.status_code == 200:
        token_data = login_response.json()
        token = token_data["access_token"]
        print(f"‚úÖ Login exitoso! Token: {token[:20]}...")
        return token
    else:
        print(f"‚ùå Error en login: {login_response.status_code}")
        print(login_response.text)
        return None

def test_quiz_topics(token):
    print_section("TEMAS DISPONIBLES")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    print_step("Obteniendo temas de matem√°ticas...")
    response = requests.get(f"{BASE_URL}/quiz/topics/matematicas", headers=headers)
    
    if response.status_code == 200:
        topics = response.json()
        print(f"‚úÖ Encontrados {len(topics)} temas:")
        for topic in topics:
            print(f"   üìö {topic['topic']} ({topic['question_count']} preguntas)")
        return topics
    else:
        print(f"‚ùå Error obteniendo temas: {response.status_code}")
        print(response.text)
        return []

def test_quiz_questions(token):
    print_section("PREGUNTAS DISPONIBLES")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    print_step("Obteniendo preguntas de √°lgebra b√°sica...")
    response = requests.get(
        f"{BASE_URL}/quiz/questions?area=matematicas&topic=algebra_basica&limit=3", 
        headers=headers
    )
    
    if response.status_code == 200:
        questions = response.json()
        print(f"‚úÖ Encontradas {len(questions)} preguntas:")
        for i, q in enumerate(questions, 1):
            print(f"   {i}. {q['title']}")
            print(f"      Dificultad: {q['difficulty']} | Puntos: {q['points_value']}")
        return questions
    else:
        print(f"‚ùå Error obteniendo preguntas: {response.status_code}")
        print(response.text)
        return []

def test_full_quiz_flow(token):
    print_section("FLUJO COMPLETO DE QUIZ")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # 1. Iniciar sesi√≥n de quiz
    print_step("1. Iniciando sesi√≥n de quiz...")
    start_data = {
        "area": "matematicas",
        "topic": "algebra_basica",
        "quiz_mode": "practice",
        "max_questions": 3
    }
    
    session_response = requests.post(
        f"{BASE_URL}/quiz/start-session", 
        json=start_data, 
        headers=headers
    )
    
    if session_response.status_code != 200:
        print(f"‚ùå Error iniciando sesi√≥n: {session_response.status_code}")
        print(session_response.text)
        return
    
    session = session_response.json()
    session_id = session["session_id"]
    print(f"‚úÖ Sesi√≥n iniciada: {session_id}")
    print(f"   Total de preguntas: {session['total_questions']}")
    
    # 2. Resolver preguntas
    for i in range(session["total_questions"]):
        print_step(f"2.{i+1}. Obteniendo pregunta {i+1}...")
        
        # Obtener pregunta actual
        question_response = requests.get(
            f"{BASE_URL}/quiz/session/{session_id}/current-question",
            headers=headers
        )
        
        if question_response.status_code != 200:
            print(f"‚ùå Error obteniendo pregunta: {question_response.status_code}")
            break
        
        question = question_response.json()
        print(f"‚úÖ Pregunta: {question['title']}")
        print(f"   A) {question['option_a']}")
        print(f"   B) {question['option_b']}")
        print(f"   C) {question['option_c']}")
        print(f"   D) {question['option_d']}")
        
        # Simular respuesta (siempre A para la prueba)
        answer_data = {
            "question_id": question["id"],
            "selected_answer": "A",
            "time_taken_seconds": 10 + i * 5,
            "hints_used": 0,
            "confidence_level": 4
        }
        
        print_step(f"     Enviando respuesta A...")
        answer_response = requests.post(
            f"{BASE_URL}/quiz/session/{session_id}/submit-answer",
            json=answer_data,
            headers=headers
        )
        
        if answer_response.status_code == 200:
            result = answer_response.json()
            status = "‚úÖ CORRECTO" if result["is_correct"] else "‚ùå INCORRECTO"
            print(f"   {status} - Puntos ganados: {result['points_earned']}")
            print(f"   Feedback: {result['feedback_message']}")
        else:
            print(f"‚ùå Error enviando respuesta: {answer_response.status_code}")
            print(answer_response.text)
        
        time.sleep(1)  # Pausa entre preguntas
    
    # 3. Verificar progreso final
    print_step("3. Verificando progreso final...")
    progress_response = requests.get(
        f"{BASE_URL}/quiz/session/{session_id}/progress",
        headers=headers
    )
    
    if progress_response.status_code == 200:
        progress = progress_response.json()
        print(f"‚úÖ Quiz completado!")
        print(f"   Preguntas respondidas: {progress['questions_answered']}")
        print(f"   Respuestas correctas: {progress['questions_correct']}")
        print(f"   Precisi√≥n: {progress['accuracy_percentage']:.1f}%")
        print(f"   Puntos totales: {progress['total_points']}")
    else:
        print(f"‚ùå Error obteniendo progreso: {progress_response.status_code}")

def test_user_stats(token):
    print_section("ESTAD√çSTICAS DE USUARIO")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    print_step("Obteniendo estad√≠sticas de matem√°ticas...")
    response = requests.get(f"{BASE_URL}/quiz/stats/matematicas", headers=headers)
    
    if response.status_code == 200:
        stats = response.json()
        print(f"‚úÖ Estad√≠sticas del usuario:")
        print(f"   Total respondidas: {stats['total_questions_answered']}")
        print(f"   Total correctas: {stats['total_questions_correct']}")
        print(f"   Precisi√≥n general: {stats['overall_accuracy']:.1f}%")
        print(f"   Puntos totales: {stats['total_points_earned']}")
        print(f"   Tiempo promedio: {stats['average_time_per_question']:.1f}s")
        print(f"   Dificultad favorita: {stats['favorite_difficulty']}")
        
        if stats['topics_stats']:
            print(f"   Estad√≠sticas por tema:")
            for topic_stat in stats['topics_stats'][:3]:
                print(f"     ‚Ä¢ {topic_stat['topic']}: {topic_stat['accuracy_percentage']:.1f}% de precisi√≥n")
    else:
        print(f"‚ùå Error obteniendo estad√≠sticas: {response.status_code}")
        print(response.text)

def test_recommendations(token):
    print_section("RECOMENDACIONES")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    print_step("Obteniendo recomendaciones de matem√°ticas...")
    response = requests.get(f"{BASE_URL}/quiz/recommendations/matematicas", headers=headers)
    
    if response.status_code == 200:
        recommendations = response.json()
        print(f"‚úÖ Recomendaciones generadas:")
        print(f"   Resumen: {recommendations['reason_summary']}")
        print(f"   Temas de enfoque: {', '.join(recommendations['focus_topics'])}")
        print(f"   Dificultad sugerida: {recommendations['suggested_difficulty']}")
        
        if recommendations['recommended_questions']:
            print(f"   Preguntas recomendadas:")
            for i, rec in enumerate(recommendations['recommended_questions'][:3], 1):
                print(f"     {i}. {rec['question']['title']} (Prioridad: {rec['priority']})")
                print(f"        Raz√≥n: {rec['reason']}")
    else:
        print(f"‚ùå Error obteniendo recomendaciones: {response.status_code}")
        print(response.text)

def main():
    print("üèóÔ∏è TORRE DE BABEL - PRUEBA DEL SISTEMA DE QUIZ")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test de autenticaci√≥n
    token = test_authentication()
    if not token:
        print("\n‚ùå No se pudo obtener el token. Abortando pruebas.")
        return
    
    # Tests del sistema de quiz
    try:
        test_quiz_topics(token)
        test_quiz_questions(token)
        test_full_quiz_flow(token)
        test_user_stats(token)
        test_recommendations(token)
        
        print_section("RESUMEN FINAL")
        print("‚úÖ Todas las pruebas completadas exitosamente!")
        print("üéÆ El sistema de quiz est√° funcionando correctamente!")
        print("üèÜ Los usuarios pueden practicar matem√°ticas del ICFES!")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 